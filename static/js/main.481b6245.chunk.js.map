{"version":3,"sources":["Constans.ts","Components/Pokedex.tsx","Components/Pokemon.tsx","App.tsx","index.tsx"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","searchContainer","display","backgroundColor","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","width","Pokedex","withRouter","props","classes","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","results","data","newPokemonData","forEach","pokemon","index","id","sprite","AppBar","position","Toolbar","className","TextField","onChange","e","currentTarget","value","toLowerCase","label","variant","Grid","container","spacing","Object","keys","map","pokemonId","includes","item","xs","Card","onClick","history","push","CardContent","CardMedia","image","style","height","Typography","getPokemonCard","CircularProgress","color","PokemonPreview","species","url","weight","types","type","sprites","front_default","Pokemon","match","params","setPokemon","catch","error","undefined","fullImageUrl","src","Link","href","typeInfo","generatePokemonJSX","Button","exact","path","render","createBrowserHistory","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.481b6245.chunk.js","sourcesContent":["import React from 'react'\r\nexport const toFirstCharUppercase = (name: string) => name.charAt(0).toUpperCase() + name.slice(1)\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {\r\n    AppBar,\r\n    Card,\r\n    CardContent,\r\n    CardMedia,\r\n    CircularProgress,\r\n    Grid,\r\n    TextField,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {makeStyles, fade} from \"@material-ui/core/styles\"\r\nimport {InitialState, InitialStateType, PokemonType} from \"../mockData\";\r\nimport {toFirstCharUppercase} from \"../Constans\";\r\nimport axios from \"axios\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pokedexContainer: {\r\n        paddingTop: '20px',\r\n        paddingLeft: '50px',\r\n        paddingRight: '50px',\r\n    },\r\n    cardMedia: {\r\n        margin: 'auto' // to center the image in card\r\n    },\r\n    cardContent: {\r\n        textAlign: \"center\"\r\n    },\r\n    searchContainer: {\r\n        display: 'flex',\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        paddingLeft: '20px',\r\n        paddingRight: '20px',\r\n        marginTop: '5px',\r\n        marginBottom: '5px',\r\n    },\r\n    searchIcon: {\r\n        alignSelf: 'flex-end',\r\n        marginBottom: '5px'\r\n    },\r\n    searchInput: {\r\n        width: '200px',\r\n        margin: '5px'\r\n    }\r\n}))\r\n\r\ntype pokemonDataType = {\r\n    [pokemonId: string]: {\r\n        id: number\r\n        name: string,\r\n        sprite: string\r\n    }\r\n\r\n}\r\n\r\n type PathParamsType = {\r\n}\r\n type PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\ntype OwnPropsType = {\r\n    history: History\r\n}\r\n\r\nexport const Pokedex =  withRouter((props: PropsType) => {\r\n\r\n    const classes = useStyles();\r\n    const [pokemonData, setPokemonData] = useState<pokemonDataType>({});\r\n    const [filter, setFilter] = useState<string>('');\r\n\r\n    const handleSearchChange = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        setFilter((e.currentTarget.value).toLowerCase())\r\n    }\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://pokeapi.co/api/v2/pokemon?limit=500`)\r\n            .then(function (response) {\r\n                const {results} = response.data\r\n                let newPokemonData = {} as pokemonDataType;\r\n                results.forEach((pokemon: PokemonType, index: number) => {\r\n                    newPokemonData = {...newPokemonData, [index + 1]: {\r\n                            id: index + 1,\r\n                            name: pokemon.name,\r\n                            sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${index + 1}.png`\r\n                        }}\r\n                })\r\n                debugger\r\n                setPokemonData(newPokemonData)\r\n            })\r\n    }, [])\r\n    const getPokemonCard = (pokemonId: number) => {\r\n\r\n        const {id, name, sprite} = pokemonData[pokemonId];\r\n        return (<Grid item xs={4} key={pokemonId}>\r\n            <Card onClick={() => props.history.push(`/${pokemonId}`)}>\r\n                <CardContent className={classes.cardContent}>\r\n                    <CardMedia\r\n                        className={classes.cardMedia}\r\n                        image={sprite}\r\n                        style={{width: '130px', height: '130px'}}\r\n                    />\r\n                    <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <div className={classes.searchContainer}>\r\n                        <SearchIcon className={classes.searchIcon}/>\r\n                        <TextField onChange={handleSearchChange} className={classes.searchInput} label='Pokemon' variant='standard'/>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {pokemonData ?\r\n                <Grid container spacing={2} className={classes.pokedexContainer}>\r\n                    {Object.keys(pokemonData).map((pokemonId) => {\r\n                       return pokemonData[+pokemonId].name.includes(filter) &&\r\n                       getPokemonCard(+pokemonId)\r\n                    })}\r\n                </Grid>\r\n                : <CircularProgress color={'primary'}/>}\r\n        </>\r\n    )\r\n})","import React, {useEffect, useState} from \"react\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {Button, CircularProgress, Link, Typography} from \"@material-ui/core\";\r\nimport {toFirstCharUppercase} from \"../Constans\";\r\nimport axios from \"axios\";\r\nimport {PokemonType, PokemonType2} from \"../mockData\";\r\n\r\nexport type PathParamsType = {\r\n    pokemonId: string\r\n}\r\nexport type PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\ntype OwnPropsType = {\r\n    // history: any\r\n}\r\nconst PokemonPreview = {\r\n    name : '',\r\n    id : 1,\r\n    species : {\r\n        url:'',\r\n        name: ''\r\n    },\r\n    height : '',\r\n    weight : '',\r\n    types : [{type:{name: ''}}],\r\n    sprites : {\r\n        front_default: ''\r\n    }\r\n}\r\nexport const Pokemon = withRouter((props: PropsType) => {\r\n    const pokemonId = props.match ? props.match.params.pokemonId : 123\r\n    const [pokemon, setPokemon] = useState<any>(PokemonPreview)\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`)\r\n            .then(function (response) {\r\n                const {data} = response\r\n                setPokemon(data)\r\n            })\r\n            .catch(function (error) {\r\n                setPokemon(false)\r\n            })\r\n    }, [pokemonId])\r\n\r\n    const generatePokemonJSX = () => {\r\n        if (pokemon) {\r\n            const {name, id, species, height, weight, types, sprites} = pokemon\r\n            const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`\r\n            const {front_default} = sprites;\r\n            return (\r\n                <>\r\n                    <Typography variant=\"h1\">\r\n                        {`${id}.`} {toFirstCharUppercase(name)}\r\n                        <img src={front_default}/>\r\n                    </Typography>\r\n                    <img style={{width: '300px', height: \"300px\"}} src={fullImageUrl}/>\r\n                    <Typography variant=\"h3\">Pokemon Info</Typography>\r\n                    <Typography>\r\n                        <Link href={species.url}>\r\n                            {species.name}\r\n                        </Link>\r\n                    </Typography>\r\n                    <Typography> Height: {height}</Typography>\r\n                    <Typography> Weight: {weight}</Typography>\r\n                    <Typography variant='h6'> Types: {\r\n                        types.map((typeInfo: any) => {\r\n                            const {name} = typeInfo.type.name\r\n                            return <Typography key={name}>{name}</Typography>\r\n                        })\r\n                    }</Typography>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {pokemon === undefined && <CircularProgress/>}\r\n            {pokemon !== undefined && pokemon && generatePokemonJSX()}\r\n            {pokemon === false && <Typography> Pokemon not found </Typography>}\r\n            <Button variant={'contained'} onClick={() => props.history.push('/')}>\r\n                back to pokedex\r\n            </Button>\r\n        </>\r\n    )\r\n})","import React from 'react';\nimport {Switch, Route, withRouter} from \"react-router-dom\";\nimport {Pokedex} from \"./Components/Pokedex\";\nimport {Pokemon} from \"./Components/Pokemon\";\n\nfunction App(props: any) {\n\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route exact path={'/'} render={() => <Pokedex />}/>\n                <Route path={'/:pokemonId'} render={() => <Pokemon />}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default withRouter(App);\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Router} from 'react-router-dom';\nimport {createBrowserHistory, History} from 'history';\nexport const history: History= createBrowserHistory();\nReactDOM.render(\n  <React.StrictMode>\n      <Router history={history}>\n        <App history={history}/>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}