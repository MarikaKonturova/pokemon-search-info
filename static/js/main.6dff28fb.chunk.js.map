{"version":3,"sources":["Constans.ts","assets/icons/Pokeball.svg","assets/icons/Sort.svg","assets/icons/search.svg","services/pokedexApi.ts","Components/Pokedex.tsx","assets/icons/arrowLeft.svg","assets/icons/height.svg","assets/icons/weight.svg","Components/ProgressBar.tsx","Components/Pokemon.tsx","App.tsx","services/pokemonApi.ts","app/store.ts","index.tsx"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","createRequest","url","pokedexApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getPokedex","query","limit","useGetPokedexQuery","Pokedex","useState","sort","setSort","console","log","pokemonData","setPokemonData","filter","setFilter","data","isFetching","useEffect","newResults","results","map","pokemon","index","id","sprite","sortedPokemons","a","b","GetPokemonCard","to","className","src","alt","Pokeball","onClick","Sort","search","placeholder","onChange","e","currentTarget","value","toLowerCase","includes","ProgressBar","props","completed","React","styleCompleted","setStyleCompleted","setInterval","fillerStyles","height","transition","width","maxWidth","borderRadius","style","backgroundColor","Pokemon","pokemonId","useParams","setPokemon","initialize","setInitialize","axios","get","response","fullImageUrl","abMap","array","abilities","el","push","ability","stMap","stats","base_stat","tyMap","types","type","newPokemon","weight","undefined","arrowLeft","i","st","App","path","element","pokemonApi","getPokemon","store","useGetPokemonQuery","configureStore","reducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6dff28fb.chunk.js","sourcesContent":["export const toFirstCharUppercase = (name: string) =>\r\n  name.charAt(0).toUpperCase() + name.slice(1);\r\n\r\n/* export const getValueByKey = (type:string) => {\r\n  const colors = {\r\n    rock: \"#b69e31\",\r\n    ghost: \"#70559b\",\r\n    steel: \"#b7b9d0\",\r\n    water: \"#6493eB\",\r\n    grass: \"#74cb48\",\r\n    psychic: \"#fb5584\",\r\n    ice: \"#9ad6df\",\r\n    dark: \"#75574c\",\r\n    fairy: \"#e69eac\",\r\n    fighting: \"#c12239\",\r\n    flying: \"#a891ec\",\r\n    poison: \"#a43e9e\",\r\n    ground: \"#dec16b\",\r\n    bug: \"#a7b723\",\r\n    fire: \"#f57d31\",\r\n    electric: \"#f9cf30\",\r\n    dragon: \"#7037ff\",\r\n  };\r\n  return colors[type as keyof typeof colors];\r\n};\r\n */","export default __webpack_public_path__ + \"static/media/Pokeball.7393e916.svg\";","export default __webpack_public_path__ + \"static/media/Sort.d494d943.svg\";","export default __webpack_public_path__ + \"static/media/search.860a5fed.svg\";","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\nimport { pokemonDataType } from \"../types\";\r\n\r\nconst baseUrl = \"https://pokeapi.co/api/v2/pokemon\";\r\nconst createRequest = (url: string) => ({ url });\r\n\r\nexport const pokedexApi = createApi({\r\n  reducerPath: \"pokedexApi\",\r\n  baseQuery: fetchBaseQuery({ baseUrl }),\r\n  endpoints: (builder) => ({\r\n    getPokedex: builder.query<any, void | string>({\r\n      query: (limit = \"50\") => createRequest(`?limit=${limit}`),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {useGetPokedexQuery} = pokedexApi","import React, { ChangeEvent, useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { toFirstCharUppercase } from \"../Constans\";\r\nimport axios from \"axios\";\r\nimport { pokemonDataType, TGeneratePokemonCard } from \"../types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Pokeball from \"../assets/icons/Pokeball.svg\";\r\nimport Sort from \"../assets/icons/Sort.svg\";\r\nimport search from \"../assets/icons/search.svg\";\r\nimport { useGetPokedexQuery } from \"../services/pokedexApi\";\r\n\r\nexport const Pokedex = () => {\r\n  const [sort, setSort] = useState<\"ZtoA\" | \"AtoZ\" | \"\">(\"\");\r\n  console.log(\"rerender\");\r\n  const [pokemonData, setPokemonData] = useState<pokemonDataType[]>([]);\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n\r\n  const handleSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setFilter(e.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const { data, isFetching } = useGetPokedexQuery(\"100\");\r\n\r\n  useEffect(() => {\r\n   if (data) {\r\n      const  {results}  = data; \r\n    let newResults = results.map((pokemon: pokemonDataType, index: number) => {\r\n      return {\r\n        id: index + 1,\r\n        name: pokemon.name,\r\n        sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n          index + 1\r\n        }.png`,\r\n      };\r\n    });\r\n    setPokemonData(newResults);\r\n    console.log(newResults);}\r\n  }, [data]);\r\n  let sortedPokemons = pokemonData;\r\n\r\n  if (sort) {\r\n    console.log(sort);\r\n    sortedPokemons = sortedPokemons.sort((a, b) => {\r\n      if (sort === \"AtoZ\") {\r\n        return a.name[0] > b.name[0] ? 1 : b.name[0] > a.name[0] ? -1 : 0;\r\n      } else {\r\n        return a.name[0] < b.name[0] ? 1 : b.name[0] < a.name[0] ? -1 : 0;\r\n      }\r\n    });\r\n    console.log(sortedPokemons);\r\n  }\r\n\r\n  const GetPokemonCard = ({ pokemon }: TGeneratePokemonCard) => {\r\n    const { id, name, sprite } = pokemon;\r\n    return (\r\n      <>\r\n        <Link to={`/${id}`}>\r\n          <div className=\"pokedex-card\">\r\n            <h4 className=\"pokedex-card-id\">{`#${id}`}</h4>\r\n            <img src={sprite} alt=\"pokedex card\" className=\"pokedex-card-img\" />\r\n            <div className=\"pokedex-card-info\">\r\n              <h2>{`${toFirstCharUppercase(name)}`}</h2>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n      </>\r\n    );\r\n  };\r\n\r\n  if(isFetching)return <>Loading.....</>\r\n\r\n  return (\r\n    <>\r\n      <div className=\"navbar\">\r\n        <div className=\"navbar-group\">\r\n          <div className=\"navbar-logo\">\r\n            <img src={Pokeball} alt=\"pokedex logo icon\" className=\"logo-icon\" />\r\n            <h1 className=\"logo-text\">Pokédex</h1>\r\n          </div>\r\n          <div className=\"navbar-filter\">\r\n            <button\r\n              className=\"navbar-filter\"\r\n              onClick={() => {\r\n                setSort(\r\n                  sort === \"\" ? \"AtoZ\" : sort === \"AtoZ\" ? \"ZtoA\" : \"AtoZ\"\r\n                );\r\n              }}\r\n            >\r\n              <img src={Sort} alt=\"filter sort\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className={\"navbar-search\"}>\r\n          <img src={search} alt=\"search icon\" className=\"search-icon\" />\r\n          <input\r\n            placeholder=\"search\"\r\n            onChange={handleSearchChange}\r\n            value={filter}\r\n          />\r\n        </div>\r\n      </div>\r\n      {pokemonData ? (\r\n        <div className=\"pokedex\">\r\n          <div className=\"wrapper\">\r\n            {sortedPokemons.map((pokemon: pokemonDataType) => {\r\n              return (\r\n                pokemon.name.includes(filter) && (\r\n                  <GetPokemonCard pokemon={pokemon} key={pokemon.id} />\r\n                )\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p>Loading ...</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/arrowLeft.fede18e5.svg\";","export default __webpack_public_path__ + \"static/media/height.5245597d.svg\";","export default __webpack_public_path__ + \"static/media/weight.5b6ae880.svg\";","import React from \"react\";\r\n\r\ntype TProgressBar = {\r\n    className: string\r\n    completed: string\r\n}\r\n\r\nconst ProgressBar = (props : TProgressBar) => {\r\n  const { className, completed } = props;\r\n  const [styleCompleted, setStyleCompleted] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    setInterval(() => setStyleCompleted(+completed), 500);\r\n  }, []);\r\n  const containerStyles = {\r\n    height: 20,\r\n    \r\n    width: '100%',\r\n    backgroundColor: \"#e0e0de\",\r\n    borderRadius: 50,\r\n  }\r\n\r\n  const fillerStyles = {\r\n    height: '100%',\r\n    transition: 'width 1s ease-in-out',\r\n    width: `${styleCompleted}%`,\r\n    maxWidth: `100%`,\r\n    borderRadius: 'inherit',\r\n  }\r\n\r\n\r\n  return (\r\n    <div style={containerStyles}>\r\n      <div style={fillerStyles} className={className}>\r\n        <span >{`${completed}%`}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { toFirstCharUppercase } from \"../Constans\";\r\nimport axios from \"axios\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { IPokemon } from \"../types\";\r\nimport arrowLeft from \"../assets/icons/arrowLeft.svg\";\r\nimport Pokeball from \"../assets/icons/Pokeball.svg\";\r\nimport height from \"../assets/icons/height.svg\";\r\nimport weight from \"../assets/icons/weight.svg\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nexport const Pokemon = () => {\r\n  const { pokemonId } = useParams();\r\n  const [pokemon, setPokemon] = useState<IPokemon | null>(null);\r\n  const [initialize, setInitialize] = useState<Boolean>(false);\r\n  const pokemonStats = [\"HP\", \"ATK\", \"DEF\", \"SATK\", \"SDEF\", \"SPD\"];\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://pokeapi.co/api/v2/pokemon/${pokemonId}`\r\n        );\r\n        const { data } = response;\r\n        const fullImageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`;\r\n\r\n        const abMap = (array: any) => {\r\n          let abilities = [];\r\n          for (const el of array) {\r\n            abilities.push(el.ability.name);\r\n          }\r\n          return abilities;\r\n        };\r\n        const stMap = (array: any) => {\r\n          let stats = [];\r\n          for (const el of array) {\r\n            stats.push(el.base_stat);\r\n          }\r\n          return stats;\r\n        };\r\n        const tyMap = (array: any) => {\r\n          let types = [];\r\n          for (const el of array) {\r\n            types.push(el.type.name);\r\n          }\r\n          return types;\r\n        };\r\n\r\n        const newPokemon: IPokemon = {\r\n          name: data.name,\r\n          id: data.id,\r\n          abilities: abMap(data.abilities),\r\n          height: data.height,\r\n          weight: data.weight,\r\n          stats: stMap(data.stats),\r\n          types: tyMap(data.types),\r\n          fullImageUrl,\r\n        };\r\n\r\n        console.log(newPokemon);\r\n        setPokemon(newPokemon);\r\n        setInitialize(true);\r\n      } catch (error) {\r\n        setPokemon(null);\r\n      }\r\n    })();\r\n  }, [pokemonId]);\r\n\r\n  if (!initialize) {\r\n    return <>Loading ..</>;\r\n  }\r\n  return (\r\n    <>\r\n      {pokemon === null && <h1> Pokemon not found </h1>}\r\n      {pokemon !== undefined && pokemon && (\r\n        <div key={pokemon.id} className={`pokemon ${pokemon.types[0]}`}>\r\n          <img src={Pokeball} alt=\"\" className=\"pokemon-decor\" />\r\n          <div className=\"pokemon-title\">\r\n            <Link to=\"/\">\r\n              {\" \"}\r\n              <img src={arrowLeft} alt=\"\" />\r\n            </Link>\r\n            <h1>{toFirstCharUppercase(pokemon.name)}</h1>{\" \"}\r\n            <h2># {`${pokemon.id}`}</h2>\r\n          </div>\r\n\r\n          <div className=\"pokemon-info\">\r\n            <img\r\n              style={{ width: \"300px\", height: \"300px\" }}\r\n              src={pokemon.fullImageUrl}\r\n              className=\"pokemon-img\"\r\n            />\r\n            <div className=\"pokemon-types\">\r\n              {pokemon.types.map((type) => {\r\n                return (\r\n                  <h2 key={type} className={`pokemon-type ${type}`}>\r\n                    {type}\r\n                  </h2>\r\n                );\r\n              })}\r\n            </div>\r\n            <h2 className=\"pokemon-h2\">About</h2>\r\n            <div className={`about-groups `}>\r\n              <div className=\"about-group\">\r\n                <div className=\"about-group-group\">\r\n                  <img src={height} alt=\"pokemon weight\" />\r\n                  <h2>{pokemon.height} cm</h2>\r\n                </div>\r\n                <p>Height</p>\r\n              </div>\r\n              <div className=\"vl\"></div>\r\n              <div className=\"about-group\">\r\n                <div className=\"about-group-group\">\r\n                  <img src={weight} alt=\"pokemon weight\" />\r\n                  <h2>{pokemon.weight} kg</h2>\r\n                </div>\r\n                <p>Weight</p>\r\n              </div>\r\n              <div className=\"vl\"></div>\r\n              <div className=\"about-group\">\r\n                <div>\r\n                  {pokemon.abilities.map((ability) => {\r\n                    return <h2 key={ability}>{ability}</h2>;\r\n                  })}\r\n                </div>\r\n                <p>Types</p>\r\n              </div>\r\n            </div>\r\n            <h4 className=\"pokemon-description\">\r\n              Lorem ipsum dolor sit, amet consectetur adipisicing elit. Ex\r\n              asperiores excepturi laudantium autem. Iure voluptate esse\r\n              possimus aut tenetur eum ut!\r\n            </h4>\r\n            <div className=\"pokemon-stats\">\r\n              <h4 className=\"stats-title pokemon-h2\">Base Stats</h4>\r\n              <div className=\"stats-bars\">\r\n                <div className=\"stats-bar\">\r\n                  {pokemonStats.map((name, i) => (\r\n                    <h2 key={i}>{name}</h2>\r\n                  ))}\r\n                </div>\r\n\r\n                <div className=\"stats-bar\">\r\n                  {pokemon.stats.map((st, i) => (\r\n                    <p key={i}>{+st<100? '0': ''}{st}</p>\r\n                  ))}\r\n                </div>\r\n                <div className=\"stats-bar\">\r\n                  {pokemon.stats.map((st, i) => (\r\n                    <ProgressBar key={i}\r\n                      className={`${pokemon.types[0]}`}\r\n                      completed={st}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport { Pokedex } from \"./Components/Pokedex\";\r\nimport { Pokemon } from \"./Components/Pokemon\";\r\nimport './styles/css/styles.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Routes>\r\n        <Route path={\"/\"} element={<Pokedex />} />\r\n        <Route path={\"/:pokemonId\"} element={<Pokemon />} />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nconst baseUrl = 'https://pokeapi.co/api/v2/pokemon'\r\n\r\nconst createRequest = (url: string) =>({\r\n    url\r\n})\r\n\r\nexport const pokemonApi = createApi({\r\n    reducerPath: 'pokemonApi',\r\n    baseQuery: fetchBaseQuery({baseUrl}),\r\n    endpoints: (builder)=>({\r\n        getPokemon: builder.query<any, string>({\r\n            query: (pokemonId)=> createRequest(`/${pokemonId}`)\r\n        })\r\n    })\r\n})\r\n\r\nexport const {useGetPokemonQuery} = pokemonApi","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { pokedexApi } from \"./../services/pokedexApi\";\r\nimport { pokemonApi } from \"./../services/pokemonApi\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [pokedexApi.reducerPath]: pokedexApi.reducer,\r\n    [pokemonApi.reducerPath]: pokemonApi.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => {\r\n    return getDefaultMiddleware().concat(\r\n      pokedexApi.middleware,\r\n      pokemonApi.middleware\r\n    );\r\n  },\r\n});\r\nexport type RootState = ReturnType<typeof store.getState>\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {  HashRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}